{"version":3,"sources":["pages/Board/Board.tsx","pages/Home/components/Board/Board.tsx","pages/Home/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Board","match","useState","list","setTodos","useEffect","title","lists","id","cards","items","map","item","elements","cItem","className","params","history","useHistory","linkId","to","borardTitle","onClick","push","Main","App","component","Home","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAmEeA,MA5Df,YAAsE,IAArDC,EAAoD,EAApDA,MAAoD,EAC1CC,qBAD0C,mBAC5DC,EAD4D,KACtDC,EADsD,KAEnEC,qBAAU,WA4BRD,EA3Bc,CACZE,MAAO,gBACPC,MAAO,CACL,CACEC,GAAI,EACJF,MAAO,iCACPG,MAAO,CACL,CAAED,GAAI,EAAGF,MAAO,iEAChB,CAAEE,GAAI,EAAGF,MAAO,yFAChB,CAAEE,GAAI,EAAGF,MAAO,kGAGpB,CACEE,GAAI,EACJF,MAAO,0DACPG,MAAO,CAAC,CAAED,GAAI,EAAGF,MAAO,uGAE1B,CACEE,GAAI,EACJF,MAAO,6CACPG,MAAO,CACL,CAAED,GAAI,EAAGF,MAAO,yFAChB,CAAEE,GAAI,EAAGF,MAAO,6GAMvB,IAEH,IAAMI,EAAK,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAMI,MAAMI,KAAI,SAACC,GAC7B,IAAMC,EAAWD,EAAKH,MAAME,KAAI,SAACG,GAAD,OAC9B,oBAAmBC,UAAU,uBAA7B,SACGD,EAAMR,OADAQ,EAAMN,OAIjB,OACE,sBAAKO,UAAU,aAAf,UACE,6BAAKH,EAAKN,QACV,oBAAIS,UAAU,aAAd,SAA4BF,MAFGD,EAAKJ,OAO1C,OACE,qCACE,sBAAKO,UAAU,eAAf,UACE,sCACGZ,QADH,IACGA,OADH,EACGA,EAAMG,MADT,KACkBL,EAAMe,OAAOR,MAE/B,wBAAQO,UAAU,oBAAlB,yBAEF,qBAAKA,UAAU,QAAf,SAAwBL,QC7BfV,G,MAxBqB,SAAC,GAAc,IAAZG,EAAW,EAAXA,KAC/Bc,EAAUC,cAEVR,EAAQP,EAAKQ,KAAI,SAACC,GACtB,IAAMO,EAAM,iBAAaP,EAAKJ,IAC9B,OACE,cAAC,IAAD,CAAMY,GAAID,EAAV,SACE,qBAAKJ,UAAU,mBAAf,SACGH,EAAKS,aAD+BT,EAAKJ,SAOlD,OACE,sBAAKO,UAAU,cAAf,UACE,wBAAQA,UAAU,qBAAqBO,QAAS,kBAAYL,EAAQM,KAAK,WAAzE,uBAGA,qBAAKR,UAAU,QAAf,SAAwBL,SCEfc,EAzBQ,WAAM,MAEFtB,mBAAmB,IAFjB,mBAEpBC,EAFoB,KAEdC,EAFc,KAa3B,OAVAC,qBAAU,WAORD,EANe,CACb,CAAEI,GAAI,EAAGa,YAAa,8CACtB,CAAEb,GAAI,EAAGa,YAAa,8HACtB,CAAEb,GAAI,EAAGa,YAAa,4GACtB,CAAEb,GAAI,EAAGa,YAAa,2HAGvB,IAGD,qCACE,2CACA,uGACA,cAAC,EAAD,CAAOlB,KAAMA,QCJJsB,EAZO,kBACpB,cAAC,IAAD,UACE,qBAAKV,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOW,UAAWC,EAAMC,KAAK,IAAIC,OAAK,IACtC,cAAC,IAAD,CAAOH,UAAW1B,EAAO4B,KAAK,aAAaC,OAAK,IAChD,cAAC,IAAD,CAAUA,OAAK,EAACT,GAAG,cCEZU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e1b39c54.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { IBoardPage } from '../../interfaces/board-page-interface';\r\nimport './board.css';\r\n\r\ntype TParams = { id: string };\r\n\r\nfunction Board({ match }: RouteComponentProps<TParams>): JSX.Element {\r\n  const [list, setTodos] = useState<IBoardPage>();\r\n  useEffect(() => {\r\n    const saved = {\r\n      title: 'My test board',\r\n      lists: [\r\n        {\r\n          id: 1,\r\n          title: 'Планы',\r\n          cards: [\r\n            { id: 1, title: 'помыть кота' },\r\n            { id: 2, title: 'приготовить суп' },\r\n            { id: 3, title: 'сходить в магазин' },\r\n          ],\r\n        },\r\n        {\r\n          id: 2,\r\n          title: 'В процессе',\r\n          cards: [{ id: 4, title: 'посмотреть сериал' }],\r\n        },\r\n        {\r\n          id: 3,\r\n          title: 'Сделано',\r\n          cards: [\r\n            { id: 5, title: 'сделать домашку' },\r\n            { id: 6, title: 'погулять с собакой' },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n    setTodos(saved);\r\n  }, []);\r\n\r\n  const items = list?.lists.map((item) => {\r\n    const elements = item.cards.map((cItem) => (\r\n      <li key={cItem.id} className=\"card board-list-item\">\r\n        {cItem.title}\r\n      </li>\r\n    ));\r\n    return (\r\n      <div className=\"card board\" key={item.id}>\r\n        <h4>{item.title}</h4>\r\n        <ul className=\"board-list\">{elements}</ul>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"board-header\">\r\n        <h1>\r\n          {list?.title}: {match.params.id}\r\n        </h1>\r\n        <button className=\"btn btn-add-board\">Add List</button>\r\n      </div>\r\n      <div className=\"cards\">{items}</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { IBoard } from '../../../../interfaces/board';\r\nimport './board.css';\r\n\r\ntype BoardsList = {\r\n  list: IBoard[];\r\n};\r\n\r\nconst Board: React.FC<BoardsList> = ({ list }) => {\r\n  const history = useHistory();\r\n\r\n  const items = list.map((item: IBoard) => {\r\n    const linkId = `/board/${item.id}`;\r\n    return (\r\n      <Link to={linkId}>\r\n        <div className=\"board-title card\" key={item.id}>\r\n          {item.borardTitle}\r\n        </div>\r\n      </Link>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"contentPage\">\r\n      <button className=\"btn  btn-add-board\" onClick={(): void => history.push('/board')}>\r\n        Add Board\r\n      </button>\r\n      <div className=\"board\">{items}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { useEffect, useState } from 'react';\r\n/* import { useHistory } from 'react-router-dom'; */\r\nimport { IBoard } from '../../interfaces/board';\r\nimport Board from './components/Board/Board';\r\n\r\nconst Main: React.FC = () => {\r\n  /*   const history = useHistory(); */\r\n  const [list, setTodos] = useState<IBoard[]>([]);\r\n  useEffect(() => {\r\n    const boards = [\r\n      { id: 1, borardTitle: 'покупки' },\r\n      { id: 2, borardTitle: 'поподготовка к свадьбе' },\r\n      { id: 3, borardTitle: 'курс по продвижению' },\r\n      { id: 4, borardTitle: 'празработка магазина' },\r\n    ];\r\n    setTodos(boards);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h1>My Boards</h1>\r\n      <p>This is a training React-project. An analogue of the \"Trello\" service.</p>\r\n      <Board list={list} />\r\n      {/*       <button className=\"btn\" onClick={(): void => history.push('/board')}>\r\n        Go to the 'Board' page\r\n      </button> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect, BrowserRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport Board from './pages/Board/Board';\r\nimport Home from './pages/Home/Home';\r\n\r\nconst App: React.FC = () => (\r\n  <BrowserRouter>\r\n    <div className=\"container\">\r\n      <Switch>\r\n        <Route component={Home} path=\"/\" exact />\r\n        <Route component={Board} path=\"/board/:id\" exact />\r\n        <Redirect exact to=\"/\" />\r\n      </Switch>\r\n    </div>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}