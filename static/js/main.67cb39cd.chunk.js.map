{"version":3,"sources":["components/Navbar.tsx","pages/Board/Board.tsx","pages/Main/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","className","to","Board","useState","list","setTodos","useEffect","title","lists","id","cards","items","map","item","elements","cItem","Main","history","useHistory","onClick","push","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAqBeA,EAlByB,kBACtC,8BACE,sBAAKC,UAAU,+CAAf,UACE,cAAC,IAAD,CAASC,GAAG,IAAID,UAAU,aAA1B,4BAGA,qBAAIA,UAAU,6BAAd,UACE,6BACE,cAAC,IAAD,CAASC,GAAG,IAAZ,oBAEF,6BACE,cAAC,IAAD,CAASA,GAAG,SAAZ,8B,QC4CKC,G,MAtDS,WAAO,IAAD,EACHC,qBADG,mBACrBC,EADqB,KACfC,EADe,KAE5BC,qBAAU,WA4BRD,EA3Bc,CACZE,MAAO,gBACPC,MAAO,CACL,CACEC,GAAI,EACJF,MAAO,iCACPG,MAAO,CACL,CAAED,GAAI,EAAGF,MAAO,iEAChB,CAAEE,GAAI,EAAGF,MAAO,yFAChB,CAAEE,GAAI,EAAGF,MAAO,kGAGpB,CACEE,GAAI,EACJF,MAAO,0DACPG,MAAO,CAAC,CAAED,GAAI,EAAGF,MAAO,uGAE1B,CACEE,GAAI,EACJF,MAAO,6CACPG,MAAO,CACL,CAAED,GAAI,EAAGF,MAAO,yFAChB,CAAEE,GAAI,EAAGF,MAAO,6GAMvB,IAEH,IAAMI,EAAK,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAMI,MAAMI,KAAI,SAACC,GAC7B,IAAMC,EAAWD,EAAKH,MAAME,KAAI,SAACG,GAAD,OAAW,oBAAIf,UAAU,uBAAd,SAAsCe,EAAMR,WACvF,OACE,sBAAKP,UAAU,aAAf,UACE,6BAAKa,EAAKN,QACV,oBAAIP,UAAU,aAAd,SAA4Bc,UAKlC,OACE,qCACE,sBAAKd,UAAU,eAAf,UACE,oCAAKI,QAAL,IAAKA,OAAL,EAAKA,EAAMG,QACX,wBAAQP,UAAU,oBAAlB,0BAEF,qBAAKA,UAAU,QAAf,SAAwBW,SCrCfK,EAbQ,WACrB,IAAMC,EAAUC,cAChB,OACE,qCACE,uCACA,uGACA,wBAAQlB,UAAU,MAAMmB,QAAS,kBAAYF,EAAQG,KAAK,WAA1D,wCCUSC,EAZO,kBACpB,eAAC,IAAD,WACE,cAAC,EAAD,IACA,qBAAKrB,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOsB,UAAWN,EAAMO,KAAK,IAAIC,OAAK,IACtC,cAAC,IAAD,CAAOF,UAAWpB,EAAOqB,KAAK,SAASC,OAAK,aCCrCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.67cb39cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navbar: React.FunctionComponent = () => (\r\n  <nav>\r\n    <div className=\"nav-wrapper teal teal darken-1 px1 container\">\r\n      <NavLink to=\"/\" className=\"brand-logo\">\r\n        Trello project\r\n      </NavLink>\r\n      <ul className=\"right hide-on-med-and-down\">\r\n        <li>\r\n          <NavLink to=\"/\">Home</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/board\">Board</NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n);\r\n\r\nexport default Navbar;\r\n","import React, { useState, useEffect } from 'react';\nimport { IBoardPage } from '../../interfaces/board-page-interface';\nimport './board.css';\n\nconst Board: React.FC = () => {\n  const [list, setTodos] = useState<IBoardPage>();\n  useEffect(() => {\n    const saved = {\n      title: 'My test board',\n      lists: [\n        {\n          id: 1,\n          title: 'Планы',\n          cards: [\n            { id: 1, title: 'помыть кота' },\n            { id: 2, title: 'приготовить суп' },\n            { id: 3, title: 'сходить в магазин' },\n          ],\n        },\n        {\n          id: 2,\n          title: 'В процессе',\n          cards: [{ id: 4, title: 'посмотреть сериал' }],\n        },\n        {\n          id: 3,\n          title: 'Сделано',\n          cards: [\n            { id: 5, title: 'сделать домашку' },\n            { id: 6, title: 'погулять с собакой' },\n          ],\n        },\n      ],\n    };\n    setTodos(saved);\n  }, []);\n\n  const items = list?.lists.map((item) => {\n    const elements = item.cards.map((cItem) => <li className=\"card board-list-item\">{cItem.title}</li>);\n    return (\n      <div className=\"card board\">\n        <h4>{item.title}</h4>\n        <ul className=\"board-list\">{elements}</ul>\n      </div>\n    );\n  });\n\n  return (\n    <>\n      <div className=\"board-header\">\n        <h1>{list?.title}</h1>\n        <button className=\"btn btn-add-board\">Add board</button>\n      </div>\n      <div className=\"cards\">{items}</div>\n    </>\n  );\n};\n\nexport default Board;\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Main: React.FC = () => {\r\n  const history = useHistory();\r\n  return (\r\n    <>\r\n      <h1>About</h1>\r\n      <p>This is a training React-project. An analogue of the \"Trello\" service.</p>\r\n      <button className=\"btn\" onClick={(): void => history.push('/board')}>\r\n        Go to the 'Board' page\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Board from './pages/Board/Board';\nimport Main from './pages/Main/Main';\n\nconst App: React.FC = () => (\n  <BrowserRouter>\n    <Navbar />\n    <div className=\"container\">\n      <Switch>\n        <Route component={Main} path=\"/\" exact />\n        <Route component={Board} path=\"/board\" exact />\n      </Switch>\n    </div>\n  </BrowserRouter>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}